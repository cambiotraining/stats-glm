---
title: "Introduction"
---
```{r}
#| echo: false
#| message: false
#| results: hide
source(file = "setup_files/setup.R")
```

```{python}
#| echo: false
#| message: false
import shutup;shutup.please()
exec(open('setup_files/setup.py').read())
```

## Data

```{r}
finches <- read_csv("data/finch_beaks.csv")

finches <- finches %>% 
  rename(beak_length = beak_length_mm,
         beak_depth = beak_depth_mm)
```

## Linear models

```{r}
ggplot(data = finches,
       mapping = aes(x = beak_length,
                     y = beak_depth,
                     colour = species)) +
  geom_point() +
  facet_wrap(facets = vars(year))
```

```{r}
fortis_1975 <- finches %>% 
  filter(species == "fortis",
         year == 1975)
```

```{r}
ggplot(fortis_1975, aes(beak_length, beak_depth)) +
  geom_point() +
  geom_smooth(method = "lm")
```

### Least-squares regression

Finding the line of best fit gives you the model. Each data point consists of the fitted value (the predicted beak depth at a given beak length), combined with the error. The error is the difference between the fitted value and the data point.

```{r}
fortis_1975_example <- fortis_1975 %>% 
  mutate(min_depth = min(beak_depth),
         max_depth = max(beak_depth),
         min_length = min(beak_length),
         max_length = max(beak_length)) 

fortis_1975_example <- lm_fortis_1975 %>% 
  augment() %>% 
  full_join(fortis_1975_example)

finch473 <- fortis_1975_example %>%
  filter(band == 473)

fortis_1975_example %>%
  ggplot(aes(beak_length, beak_depth)) +
  geom_point(colour = "#999999") +
  theme_bw() +
  labs(title = "Finch 473 (1975)",
       x = "Beak length (mm)",
       y = "Beak depth (mm)") +
  geom_point(data = . %>% filter(band == 473),
             mapping = aes(beak_length, beak_depth),
             colour = "#D55E00",
             size = 3) +
  annotate(geom = "text", x = 9, y = 9.6, hjust = 0,
           label = "observed beak depth") +
  geom_segment(data = . %>% filter(band == 473),
               aes(x = beak_length, xend = beak_length,
                   y = min_depth, yend = beak_depth),
               linetype = "dashed",
               colour = "#D55E00") +
  annotate(geom = "text", x = 10.55, y = 8, hjust = 0,
           label = "observed beak length") +
  geom_segment(data = . %>% filter(band == 473),
               aes(x = min_length, xend = beak_length,
                   y = beak_depth, yend = beak_depth),
               linetype = "dashed",
               colour = "#D55E00") +
  geom_smooth(method = "lm", se = FALSE) +
  geom_point(data = finch473, aes(x = beak_length,
                                  y = .fitted),
             colour = "blue", size = 3) +
  geom_segment(data = finch473,
               aes(x = beak_length, xend = (beak_length + 0.5),
                   y = .fitted, yend = .fitted),
               arrow = arrow(ends = "first", length = unit(2, "mm"))) +
  annotate(geom = "text", x = 11.05, y = finch473$.fitted, hjust = 0,
           label = "fitted value") +
  geom_segment(data = finch473,
               aes(x = beak_length, xend =  beak_length,
                   y = beak_depth, yend = .fitted),
               arrow = arrow(ends = "both", length = unit(2, "mm"))) +
  annotate(geom = "text", x = 10.45, y = 9.3, label = "\u03b5")
```

We can then perform a linear regression. The question we're asking:

> Is the line of best fit a better predictor of our data than a horizontal line across the average value?

```{r}
fortis_1975_example %>%
  ggplot(aes(beak_length, beak_depth)) +
  geom_point(colour = "#999999") +
  theme_bw() +
  labs(title = "Finch beak observations (1975)",
       x = "Beak length (mm)",
       y = "Beak depth (mm)") +
  geom_smooth(method = "lm", se = FALSE) +
  geom_hline(yintercept = fortis_1975_example %>%
               summarise(mean_bd = mean(beak_depth)) %>%
               pull(),
             linetype = "dashed", colour = "#D55E00") +
  annotate(geom = "text", x = 8.5, y = 9.3, hjust = 0,
           label = "average beak depth")

fortis_1975_example %>% summarise(mean_bl = mean(beak_length)) %>% pull()
```
What we're actually testing is whether the slope of the line of best fit is any different from zero.

To find the answer, we perform an ANOVA.

### ANOVA on the linear model

We define the linear model, then perform an ANOVA.

```{r}
lm_fortis_1975 <- lm(beak_depth ~ beak_length,
                     data = fortis_1975)

anova(lm_fortis_1975)
```

The result suggests that `beak_length` is a statistically significant predictor of `beak_depth`.

We can write the linear equation, if we know the model coefficients:

```{r}
lm_fortis_1975
```

The equation is in the form of:

$Y = \beta_0 + \beta_1X$

which in our case is

$beak\_depth = \beta_0 + \beta_1 \times beak\_length$

and gives us

$beak\_depth = -0.34 + 0.90 \times beak\_length$

### Assumptions

1. Data should be linear
2. Residuals are normally distributed
3. Equality of variance
4. Data are independent
5. (no influential points)

```{r}
lm_fortis_1975 %>% 
  resid_panel(plots = c("resid", "qq", "ls", "cookd"),
              smoother = TRUE)
```


## Generalised features

In this case the assumptions are all met. But what if we have data where that isn't the case? For example, what if we have data where we _can't_ describe the relationship between the variables in a linear way?

Let's look some data that come from an analysis of gene flow across two finch species.

Two species, _Geospiza fortis_ and _G. scandens_. There are measurements that are split by a uniquely timed event: an particularly strong El Nino event in 1983 changed the vegetation and food supply of the finches, allowing F1 hybrids to survive. These measurements are classed as `early` (pre-1983) and `late` (1983 onwards).

```{r}
# https://www.nature.com/articles/s41559-020-1183-9#MOESM2
finches_2020 <- read_csv("data/41559_2020_1183_MOESM2_ESM.csv")
```

```{r}
library(janitor)

finches_2020 <- finches_2020 %>% 
  clean_names() %>% 
  mutate(timepoint = (str_detect(group, "Late")),
         timepoint = if_else(timepoint == FALSE, "early", "late"),
         timepoint = factor(timepoint))
  
```

Visualising the different groups:

```{r}
finches_2020 %>% 
ggplot(aes(x = blength, y = group,
           colour = species)) +
  geom_point() +
  facet_wrap(vars(timepoint))

data %>% 
  ggplot(aes(x = bdepth, y = blength,
             colour = Group)) +
  geom_point() +
  facet_wrap(vars(Species))
```

We can see that in the early time point (pre-1983) both species had relatively clear beak shapes. Generally, _G. fortis_ had blunt beaks, whereas _G. scandens_ had pointed beaks.

Let's say we were in a situation where we only had the beak length measurements. Could we make some predictions about the species? Let's first focus on just the early time points.

```{r}
# filter for early time points
early_finches <- finches_2020 %>% 
  filter(timepoint == "early") %>% 
  mutate(beak_type = if_else(str_detect(group, "blunt"), 0, 1))

ggplot(early_finches, aes(x = blength, y = beak_type)) +
  geom_point()
```

We could try to model this with the knowledge we've got so far and perform a linear regression analysis.

```{r}
ggplot(early_finches, aes(x = blength, y = beak_type)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE)
```

```{r}
lm_early <- lm(beak_type ~ blength,
               data = early_finches)

anova(lm_early)

lm_early %>% 
  resid_panel(plots = c("resid", "qq", "ls", "cookd"),
              smoother = TRUE)

lm_early %>% 
  augment() %>% 
  ggplot(aes(x = .resid)) +
  geom_histogram()
```

Assumptions are definitely violated. Surprisingly, the Q-Q plot and histogram of the residuals doesn't look too bad.

But we can't describe these data with some kind of linear relationship, of course.

```{r}
glm_early <- glm(beak_type ~ blength,
                 family = binomial(link = "logit"),
                 data = early_finches)

summary(glm_early)
```

Let's plot the fitted model values:

```{r}
glm_early %>% 
  augment() %>% 
  ggplot(aes(x = blength, y = .fitted)) +
  geom_point()
```

Main points:

* `blength` is a significant predictor of `beak_type`
* the fitted model values are still linear!

The fitted model values are linear because the non-linear relationship between beak length and beak type is linearised by the model. It does so using a **link function**.

In this case the default link function for the binomial family of models is the **logit** function.

So the values we're seeing are on a logit scale. If we wanted to visualise the actual _probabilities_, we could do that as follows:

```{r}
glm_early %>% 
  augment(type.predict = "response") %>% 
  ggplot(aes(x = blength, y = .fitted)) +
  geom_point()
```

From this we can see that the probability of having a pointed beak (which is considered a "success") is approaching 1 as the beak length gets longer.

```{r}
library(modelr)

blength <- data.frame(blength = c(10, 12, 8, 18))

add_predictions(blength, glm_early,
                type = "response")
```

