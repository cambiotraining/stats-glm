---
title: "Introduction"
---

```{r}
library(ggplot2)
library(ggdist)
library(distributional)
# simulate data
set.seed(1632)
# Y ~ Normal(mu, sigma)
# mu = a1 + a2 * X
dat <- data.frame(x = runif(100, min = 1, max = 5))
dat$y <- rnorm(100, -0.5 + dat$x*1/2, 0.1)
ggplot(dat, aes(x, y)) +
  geom_point(colour = "steelblue") +
  geom_smooth(method = "lm", se = FALSE, colour = "firebrick") +
  stat_slab(data = data.frame(x = c(2, 3, 4)), 
            aes(x = x, ydist = dist_normal(-0.5+x*1/2, .1)),
            inherit.aes = FALSE,
            fill = NA, colour = "black", 
            scale = 0.3, size = 0.5) +
  geom_vline(xintercept = c(2, 3, 4)-0.05, size = 1) +
  theme_classic() +
  coord_fixed()
```


Generalised:

```{r}
# Y ~ Poisson(lambda)
# log(lambda) = a1 + a2 * X
dat <- data.frame(x = runif(100, min = 1, max = 5))
dat$y <- rpois(100, exp(-0.5 + dat$x*1/2))
ggplot(dat, aes(x, y)) +
  geom_point(colour = "steelblue") +
  geom_smooth(method = "glm", formula = y ~ x, method.args = list(family = "poisson"),
              se = FALSE, colour = "firebrick") +
  stat_slab(data = data.frame(x = c(2, 3, 4)),
            aes(x = x, ydist = dist_poisson(exp(-0.5+x*1/2))),
            inherit.aes = FALSE,
            fill = NA, colour = "black",
            scale = 0.3, size = 0.5) +
  geom_vline(xintercept = c(2, 3, 4)-0.05, size = 1) +
  theme_classic()
# Y ~ Binomial(n, p)
# logit(p) = a1 + a2 * X
dat <- data.frame(x = runif(100, min = 1, max = 5))
dat$y <- rbinom(100, size = 1, prob = plogis(-3 + dat$x))
ggplot(dat, aes(x, y)) +
  geom_point(colour = "steelblue",
             aes(y = ifelse(y == 1, y-0.02, y+0.02))) +
  geom_smooth(method = "glm", formula = y ~ x,
              method.args = list(family = "binomial"),
              se = FALSE, colour = "firebrick") +
  stat_dots(data = data.frame(x = c(2, 3, 4)),
            aes(x = x, ydist = dist_binomial(1, plogis(-3 + x))),
            inherit.aes = FALSE,
            fill = NA, colour = "black",
            scale = 0.6, size = 1) +
  geom_vline(xintercept = c(2, 3, 4)) +
  theme_classic()
```

Negative binomial
```{r}

dat <- data.frame(x = runif(100, min = 1, max = 5))
dat$y <- rnbinom(100, mu = 2, size = 1)
ggplot(dat, aes(x, y)) +
  geom_point(colour = "steelblue") +
  geom_smooth(method = MASS::glm.nb, formula = y ~ x,
              se = FALSE, colour = "firebrick") +
  stat_slab(data = data.frame(x = c(2, 3, 4)),
            aes(x = x, ydist = dist_negative_binomial(size = 3, prob = 0.5)),
            inherit.aes = FALSE,
            fill = NA, colour = "black",
            scale = 0.3, size = 0.5) +
  geom_vline(xintercept = c(2, 3, 4)-0.05, size = 1) +
  theme_classic()
```


