[
  {
    "objectID": "index.html#core-aims",
    "href": "index.html#core-aims",
    "title": "Generalised linear models",
    "section": "Core aims",
    "text": "Core aims\nTo introduce sufficient understanding and coding experience for analysing data with non-continuous response variables.\n\n\n\n\n\n\nCourse aims\n\n\n\nTo know what to do when presented with an arbitrary data set e.g.\n\nConstruct\n\na logistic model for binary response variables\na logistic model for proportion response variables\na Poisson model for count response variables\na Negative Binomial model for count response variables (to be added later)\n\nPlot the data and the fitted curve in each case for both continuous and categorical predictors\nAssess the significance of fit\nAssess assumption of the model"
  },
  {
    "objectID": "setup.html#data",
    "href": "setup.html#data",
    "title": "2  Data & Setup",
    "section": "Data",
    "text": "Data\n Download"
  },
  {
    "objectID": "materials/glm-practical-logistic-binary.html#libraries-and-functions",
    "href": "materials/glm-practical-logistic-binary.html#libraries-and-functions",
    "title": "\n3  Binary response\n",
    "section": "\n3.1 Libraries and functions",
    "text": "3.1 Libraries and functions\n\n\n\n\n\n\nClick to expand\n\n\n\n\n\n\n\nR\nPython\n\n\n\n\n3.1.1 Libraries\n\n3.1.2 Functions\n\n\n\n\n3.1.3 Libraries\n\n3.1.4 Functions\n\n\n\n\n\n\n\nThe example in this section uses the following data set:\ndata/diabetes.csv\nThis is a data set comprising 768 observations of three variables (one dependent and two predictor variables). This records the results of a diabetes test result as a binary variable (1 is a positive result, 0 is a negative result), along with the result of a glucose test and the diastolic blood pressure for each of 767 women. The variables are called test_result, glucose and diastolic."
  },
  {
    "objectID": "materials/glm-practical-logistic-binary.html#load-and-visualise-the-data",
    "href": "materials/glm-practical-logistic-binary.html#load-and-visualise-the-data",
    "title": "\n3  Binary response\n",
    "section": "\n3.2 Load and visualise the data",
    "text": "3.2 Load and visualise the data\nFirst we load the data, then we visualise it.\n\n\nR\nPython\n\n\n\n\ndiabetes <- read_csv(\"data/diabetes.csv\")\n\n\n\n\n\n\n\nLooking at the data, we can see that the test_result column contains zeros and ones. These are yes/no test result outcomes and not actually numeric representations.\nWe’ll deal with that issue later.\nWe can plot the data, by outcome:\n\n\nR\nPython\n\n\n\n\ndiabetes %>% \n  ggplot(aes(x = factor(test_result), y = glucose)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\nIt looks as though the patients with a positive diabetes test have slightly higher glucose levels than those with a negative diabetes test.\nWe can visualise that differently by plotting all the data points as a classic binary response plot:\n\n\nR\nPython\n\n\n\n\ndiabetes %>% \n  ggplot(aes(x = glucose, y = test_result)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nThis presents us with a bit of an issue. We could fit a linear regression model to these data, although we already know that this is a bad idea…\n\n\nR\nPython\n\n\n\n\ndiabetes %>% \n  ggplot(aes(x = glucose, y = test_result)) +\n  geom_smooth(method = \"lm\") +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nOf course this is rubbish - we can’t have test results outside the range of [0, 1].\nBut for the sake of exploration, let’s look at the assumptions:\n\n\nR\nPython\n\n\n\n\ndiabetes %>% \n  lm(test_result ~ glucose, data = .) %>% \n  resid_panel(plots = c(\"resid\", \"qq\", \"ls\", \"cookd\"),\n              smoother = TRUE)\n\n`geom_smooth()` using formula 'y ~ x'\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nThey’re pretty extremely bad.\n\nThe response is not linear (Residual Plot, binary response plot, common sense).\nThe residuals are not distributed normally (Q-Q Plot)\nThe variance is not homogeneous across the predicted values (Location-Scale Plot)\nBut - there is always a silver lining - we don’t have influential data points.\n\n\n\n\n\n\n\nViewing residuals\n\n\n\nAnother way of viewing the residuals (apart from the Q-Q plot) is as a dot-plot. In R, the ggdist and distributional packages are extremely useful for this kind of stuff.\nWhat I’m doing here is:\n\ndefine the model\ncreate a normal distribution with \\(\\mu = 0\\) and \\(\\sigma = 0.415\\) (I’ve extracted the \\(\\sigma\\) value from the residuals with rstatix::get_summary_stats())\nplot the residuals\n\n\ndiabetes %>% \n  lm(test_result ~ glucose, data = .) %>%\n  resid() %>%\n  as_tibble() %>%\n  # rstatix::get_summary_stats()\n  ggplot(aes(x = value)) +\n  stat_dist_halfeye(aes(dist = dist_normal(0, 0.415)),\n                    orientation = \"horizontal\") +\n  stat_dotsinterval(aes(x = value),\n                    orientation = \"horizontal\",\n                    fill = \"firebrick\", scale = 1) +\n  labs(title = \"Linear model (diabetes)\", y = \"probability\", x = NULL)\n\n\n\n\nThis again shows us that the residuals are really not normally distributed. If they were, then they would overlap much more closely with the distribution (in grey)."
  },
  {
    "objectID": "materials/glm-practical-logistic-binary.html#creating-a-suitable-model",
    "href": "materials/glm-practical-logistic-binary.html#creating-a-suitable-model",
    "title": "\n3  Binary response\n",
    "section": "\n3.3 Creating a suitable model",
    "text": "3.3 Creating a suitable model\nSo far we’ve established that using a simple linear model describe a potential relationship between glucose levels and the probability of getting a positive test result is not a good idea. So, what can we do?\nOne of the ways we can deal with binary outcome data is by performing a logistic regression. Instead of fitting a straight line to our data, and performing a regression on that, we fit a line that has an S shape. This avoids the model making predictions outside the \\([0, 1]\\) range.\nThere are many mathematical functions that produce S-shaped graphs. The logistic function is one of them and well-suited to these kind of data.\nIn the most simple form a logistic function is written like this:\n\\(Y = \\frac{1}{1 + \\exp(-X)}\\)\n\n\n\n\n\n\nEuler’s number\n\n\n\nIn mathematics, \\(\\rm e\\) represents a constant of around 2.718. Another notation is \\(\\exp\\), which is often used when notations become a bit cumbersome. Here, I exclusively use the \\(\\exp\\) notation for consistency.\n\n\nWe can generalise this, by writing it as follows:\n\\(Y = \\frac{1}{1 + \\exp-(\\beta_0 + \\beta_1X)}\\)\nNote that the \\(\\beta_0 + \\beta_1X\\) part is identical to the formula of a straight line. We’ve come across this before when we were doing simple linear regression!\nThe rest of the function is what makes the straight line curve into its characteristic S shape. The middle of the S (where \\(Y = 0.5\\)) occurs when \\(X = \\frac{-b}{a}\\).\n\n\n\n\n\n\nThe logistic function\n\n\n\nThe shape of the logistic function is hugely influenced by the different parameter, in particular \\(\\beta_1\\). The plots below show different situations, where \\(\\beta_0 = 0\\) in all cases, but \\(\\beta_1\\) varies.\nThe first plot shows the logistic function in its simplest form, with the others showing the effect of varying \\(\\beta_1\\).\n\n\n\n\n\n\nwhen \\(\\beta_1 = 1\\), this gives the simplest logistic function\nwhen \\(\\beta_1 = 0\\) gives a horizontal line, with \\(Y = 1/(1+exp(-\\beta_0X)\\)\n\nwhen \\(\\beta_1\\) is negative flips the curve around, so it slopes down\nwhen \\(\\beta_1\\) is very large then the curve becomes extremely steep\n\n\n\nWe can fit such an S-shaped curve to our diabetes data set, by creating a generalised linear model.\n\n\nR\nPython\n\n\n\nIn R we have a few options to do this, and by far the most familiar function would be glm(). Here we save the model in an object called dia_glm:\n\ndia_glm <- glm(test_result ~ glucose,\n               family = binomial,\n               data = diabetes)\n\nThe format of this function is similar to that used by the lm() function for linear models. The important difference is that we must specify the family of error distribution to use. For logistic regression we must set the family to binomial.\nIf you forget to set the family argument, then the glm() function will perform a standard linear model fit, identical to what the lm() function would do."
  },
  {
    "objectID": "materials/glm-practical-logistic-binary.html#model-output",
    "href": "materials/glm-practical-logistic-binary.html#model-output",
    "title": "\n3  Binary response\n",
    "section": "\n3.4 Model output",
    "text": "3.4 Model output\nThat’s the easy part done! The trickier part is interpreting the output. First of all, we’ll get some summary information.\n\n\nR\nPython\n\n\n\n\nsummary(dia_glm)\n\n\nCall:\nglm(formula = test_result ~ glucose, family = binomial, data = diabetes)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-2.1353  -0.7819  -0.5189   0.8269   2.2832  \n\nCoefficients:\n             Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -5.611732   0.442289  -12.69   <2e-16 ***\nglucose      0.039510   0.003398   11.63   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 936.6  on 727  degrees of freedom\nResidual deviance: 752.2  on 726  degrees of freedom\nAIC: 756.2\n\nNumber of Fisher Scoring iterations: 4"
  },
  {
    "objectID": "materials/glm-practical-logistic-binary.html#exercise",
    "href": "materials/glm-practical-logistic-binary.html#exercise",
    "title": "\n3  Binary response\n",
    "section": "\n3.5 Exercise",
    "text": "3.5 Exercise\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n\nR\nPython"
  },
  {
    "objectID": "materials/glm-practical-logistic-binary.html#key-points",
    "href": "materials/glm-practical-logistic-binary.html#key-points",
    "title": "\n3  Binary response\n",
    "section": "\n3.6 Key points",
    "text": "3.6 Key points\n\n\n\n\n\n\nNote\n\n\n\n\nWe use a logistic regression to model a binary response\nWe can feed new observations into the model and get probabilities for the outcome"
  },
  {
    "objectID": "materials/glm-practical-logistic-proportion.html#libraries-and-functions",
    "href": "materials/glm-practical-logistic-proportion.html#libraries-and-functions",
    "title": "\n4  Proportional response\n",
    "section": "\n4.1 Libraries and functions",
    "text": "4.1 Libraries and functions\n\ntidyverse\n\n\n\n\n\n\n\n\nLibrary\nDescription\n\n\n\ntidyverse\nA collection of R packages designed for data science\n\n\ntidymodels\nA collection of packages for modelling and machine learning using tidyverse principles"
  },
  {
    "objectID": "materials/glm-practical-logistic-proportion.html#datasets",
    "href": "materials/glm-practical-logistic-proportion.html#datasets",
    "title": "\n4  Proportional response\n",
    "section": "\n4.2 Datasets",
    "text": "4.2 Datasets\n\nChallenger\n\n\nThe example in this section uses the following data set:\ndata/challenger.csv\nThese data, obtained from the faraway package, contain information related to the explosion of the USA Space Shuttle Challenger on 28 January, 1986. An investigation after the disaster traced back to certain joints on one of the two solid booster rockets, each containing O-rings that ensured no exhaust gases could escape from the booster.\nThe night before the launch was unusually cold, with temperatures below freezing. The final report suggested that the cold snap during the night made the o-rings stiff, and unable to adjust to changes in pressure. As a result, exhaust gases leaked away from the solid booster rockets, causing one of them to break loose and rupture the main fuel tank, leading to the final explosion.\nThe question we’re trying to answer in this session is: based on the data from the previous flights, would it have been possible to predict the failure of most o-rings on the Challenger flight?"
  },
  {
    "objectID": "materials/glm-practical-logistic-proportion.html#visualise-the-data",
    "href": "materials/glm-practical-logistic-proportion.html#visualise-the-data",
    "title": "\n4  Proportional response\n",
    "section": "\n4.3 Visualise the data",
    "text": "4.3 Visualise the data\nFirst, we read in the data:\n\ntidyverse\n\n\n\nchallenger <- read_csv(\"data/challenger.csv\")\n\nRows: 23 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (2): temp, damage\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nchallenger\n\n# A tibble: 23 × 2\n    temp damage\n   <dbl>  <dbl>\n 1    53      5\n 2    57      1\n 3    58      1\n 4    63      1\n 5    66      0\n 6    67      0\n 7    67      0\n 8    67      0\n 9    68      0\n10    69      0\n# … with 13 more rows\n\n\n\n\n\nThe data set contains several columns:\n\n\ntemp, the launch temperature in degrees Fahrenheit\n\ndamage, the number of o-rings that showed erosion\n\nBefore we have a further look at the data, let’s calculate the proportion of damaged o-rings (prop_damaged) and the total number of o-rings (total) and update our data set.\n\ntidyverse\n\n\n\nchallenger <-\nchallenger %>%\n  mutate(total = 6,                     # total number of o-rings\n         intact = 6 - damage,           # number of undamaged o-rings\n         prop_damaged = damage / total) # proportion damaged o-rings\n\nchallenger\n\n# A tibble: 23 × 5\n    temp damage total intact prop_damaged\n   <dbl>  <dbl> <dbl>  <dbl>        <dbl>\n 1    53      5     6      1        0.833\n 2    57      1     6      5        0.167\n 3    58      1     6      5        0.167\n 4    63      1     6      5        0.167\n 5    66      0     6      6        0    \n 6    67      0     6      6        0    \n 7    67      0     6      6        0    \n 8    67      0     6      6        0    \n 9    68      0     6      6        0    \n10    69      0     6      6        0    \n# … with 13 more rows\n\n\n\n\n\nPlotting the proportion of damaged o-rings against the launch temperature shows the following picture:\n\ntidyverse\n\n\n\nggplot(challenger, aes(x = temp, y = prop_damaged)) +\n  geom_point()\n\n\n\n\n\n\n\nThe point on the left is the data point corresponding to the coldest flight experienced before the disaster, where five damaged o-rings were found. Fortunately, this did not result in a disaster.\nHere we’ll explore if we could have predicted the failure of both o-rings on the Challenger flight, where the launch temperature was 31 degrees Fahrenheit."
  },
  {
    "objectID": "materials/glm-practical-logistic-proportion.html#model-building",
    "href": "materials/glm-practical-logistic-proportion.html#model-building",
    "title": "\n4  Proportional response\n",
    "section": "\n4.4 Model building",
    "text": "4.4 Model building\nWe only have 23 data points in total. So we’re building a model on not that much data - we should keep this in mind when we draw our conclusions!\n\ntidyverse\n\n\nWe are using a logistic regression for a proportion response in this case, since we’re interested in the proportion of o-rings that are damaged.\nThe logistic_reg() function we used in the binary response section does not work here, because it expects a binary (yes/no; positive/negative; 0/1 etc) response.\nTo deal with that, we are using the standard linear_reg() function, still using the glm or generalised linear model engine, with the family or error distribution set to binomial (as before).\nFirst we set the model specification:\n\nchl_mod <- linear_reg(mode = \"regression\") %>%\n  set_engine(\"glm\", family = \"binomial\")\n\nThen we fit the data. Fitting the data for proportion responses is a bit annoying, where you have to give the glm model a two-column matrix to specify the response variable.\nHere, the first column corresponds to the number of damaged o-rings, whereas the second column refers to the number of intact o-rings. We use the cbind() function to bind these two together into a matrix.\n\nchl_fit <- chl_mod %>% \n  fit(cbind(damage, intact) ~ temp,\n      data = challenger)\n\nNext, we can have a closer look at the results:\n\nchl_fit %>% tidy()\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic   p.value\n  <chr>          <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)   11.7      3.30        3.54 0.000403 \n2 temp          -0.216    0.0532     -4.07 0.0000478\n\n\nWe can see that the p-values of the intercept and temp are significant. We can also use the intercept and temp coefficients to construct the logistic equation, which we can use to sketch the logistic curve.\n\\[E(prop \\ failed\\ orings) = \\frac{\\exp{(11.66 -  0.22 \\times temp)}}{1 + \\exp{(11.66 -  0.22 \\times temp)}}\\]\nLet’s see how well our model would have performed if we would have fed it the data from the ill-fated Challenger launch.\nOne way of doing this it to generate a table with data for a range of temperatures, from 25 to 85 degrees Fahrenheit, in steps of 1. We can then use these data to generate the logistic curve, based on the fitted model.\n\nmodel <- tibble(temp = seq(25, 85, 1))\n\n\n# get the predicted proportions for the curve\ncurve <- chl_fit %>% augment(new_data = model)\n\n# plot the curve and the original data\nggplot(curve, aes(temp, .pred)) +\n  geom_line(colour = \"red\") +\n  geom_point(data = challenger, aes(temp, prop_damaged)) +\n  # add a vertical line at the disaster launch temperature\n  geom_vline(xintercept = 31, linetype = \"dashed\")\n\n\n\n\nIt seems that there was a high probability of both o-rings failing at that launch temperature. One thing that the graph shows is that there is a lot of uncertainty involved in this model."
  },
  {
    "objectID": "materials/glm-practical-logistic-proportion.html#exercise---predicting-failure",
    "href": "materials/glm-practical-logistic-proportion.html#exercise---predicting-failure",
    "title": "\n4  Proportional response\n",
    "section": "\n4.5 Exercise - predicting failure",
    "text": "4.5 Exercise - predicting failure\nThe data point at 53 degrees Fahrenheit is quite influential for the analysis. Remove this data point and repeat the analysis. Is there still a predicted link between launch temperature and o-ring failure?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ntidyverse\n\n\nFirst, we need to remove the influential data point:\n\nchallenger_new <- challenger %>% filter(temp != 53)\n\nWe can reuse the model specification, but we do have to update our fit:\n\nchl_new_fit <- chl_mod %>% \n  fit(cbind(damage, intact) ~ temp,\n      data = challenger_new)\n\n\n# get the predicted proportions for the curve\ncurve_new <- chl_new_fit %>% augment(new_data = model)\n\n# plot the curve and the original data\nggplot(curve_new, aes(temp, .pred)) +\n  geom_line(colour = \"red\") +\n  geom_point(data = challenger_new, aes(temp, prop_damaged)) +\n  # add a vertical line at the disaster launch temperature\n  geom_vline(xintercept = 31, linetype = \"dashed\")\n\n\n\n\nThe prediction proportion of damaged o-rings is markedly less in this scenario, with a failure rate of around 80%. The original fitted curve already had quite some uncertainty associated with it, but the uncertainty of this model is much greater."
  },
  {
    "objectID": "materials/glm-practical-logistic-proportion.html#key-points",
    "href": "materials/glm-practical-logistic-proportion.html#key-points",
    "title": "\n4  Proportional response\n",
    "section": "\n4.6 Key points",
    "text": "4.6 Key points\n\n\n\n\n\n\nNote\n\n\n\n\nWe can use a logistic model for proportion response variables"
  },
  {
    "objectID": "materials/glm-practical-poisson.html#libraries-and-functions",
    "href": "materials/glm-practical-poisson.html#libraries-and-functions",
    "title": "\n5  Poisson regression\n",
    "section": "\n5.1 Libraries and functions",
    "text": "5.1 Libraries and functions\n\ntidyverse\n\n\n\n\n\n\n\n\nLibrary\nDescription\n\n\n\ntidyverse\nA collection of R packages designed for data science\n\n\ntidymodels\nA collection of packages for modelling and machine learning using tidyverse principles\n\n\npoissonreg\nEnables the parsnip package to fit various types of Poisson regression models"
  },
  {
    "objectID": "materials/glm-practical-poisson.html#datasets",
    "href": "materials/glm-practical-poisson.html#datasets",
    "title": "\n5  Poisson regression\n",
    "section": "\n5.2 Datasets",
    "text": "5.2 Datasets\n\n\nIslands\nSeatbelts\n\n\n\nThe example in this section uses the following data set:\ndata/islands.csv\nThis is a data set comprising 35 observations of two variables (one dependent and one predictor). This records the number of species recorded on different small islands along with the area (km2) of the islands. The variables are species and area.\n\n\nThe seatbelts data set is a multiple time-series data set that was commissioned by the Department of Transport in 1984 to measure differences in deaths before and after front seatbelt legislation was introduced on 31st January 1983. It provides monthly total numerical data on a number of incidents including those related to death and injury in Road Traffic Accidents (RTA’s). The data set starts in January 1969 and observations run until December 1984.\nYou can find the file in data/seatbelts.csv"
  },
  {
    "objectID": "materials/glm-practical-poisson.html#visualise-the-data",
    "href": "materials/glm-practical-poisson.html#visualise-the-data",
    "title": "\n5  Poisson regression\n",
    "section": "\n5.3 Visualise the data",
    "text": "5.3 Visualise the data\nA good first step is always to explore your data prior to any further analysis.\n\ntidyverse\n\n\nFirst, we load and inspect the data:\n\nislands <- read_csv(\"data/island.csv\")\n\nislands\n\n# A tibble: 35 × 2\n   species  area\n     <dbl> <dbl>\n 1     114  12.1\n 2     130  13.4\n 3     113  13.7\n 4     109  14.5\n 5     118  16.8\n 6     136  19.0\n 7     149  19.6\n 8     162  20.6\n 9     145  20.9\n10     148  21.0\n# … with 25 more rows\n\n\nLooking at the data, we can see that there are two columns: species, which contains the number of species recorded on each island and area, which contains the surface area of the island in square kilometers.\nWe can plot the data:\n\nislands %>% \n  ggplot(aes(x = area, y = species)) +\n  geom_point()\n\n\n\n\n\n\n\nIt looks as though area may have an effect on the number of species that we observe on each island. We note that the response variable is count data and so we try to construct a Poisson regression."
  },
  {
    "objectID": "materials/glm-practical-poisson.html#model-building",
    "href": "materials/glm-practical-poisson.html#model-building",
    "title": "\n5  Poisson regression\n",
    "section": "\n5.4 Model building",
    "text": "5.4 Model building\nTo create a poisson regression we do the following:\n\ntidyverse\n\n\nAgain, similar to what we’ve done for the logistic models, we will use the parsnip package from the tidymodels library. Yes, the workflow still seems a bit faffy, but it provides a common syntax for a whole range of modelling libraries. This means that the syntax will stay the same as you do different kind of model comparisons.\nIf you haven’t loaded tidymodels yet, now is a really good time. We also need to load poissonreg, which adds extra functionality to parsnip.\n\n# install.packages(\"tidymodels\")\nlibrary(tidymodels)\n# install.packages(\"poissonreg\")\nlibrary(poissonreg)\n\nRemember that the workflow in parsnip is a bit different to what we’re used to so far. Using parsnip we approach things in a more systematic manner. We specify a model in three steps:\n\n\nSpecify the type of model based on its mathematical structure (e.g., linear regression, logistic regression, poisson regression etc).\n\nFor example:\n\n\nlinear_reg() for linear regression\n\nlogistic_reg() for logistic regression\n\npoisson_reg() for poisson regression (we’ll be using that here)\n\n\nWhen required, declare the mode of the model. The mode reflects the type of prediction outcome. For numeric outcomes, the mode is regression; for qualitative outcomes, it is classification. If a model can only create one type of model, such as poisson regression, the mode is already set to, in this case, mode = \"regression\".\nSpecify the engine for fitting the model. This usually is the software package or library that should be used.\n\nFor example,\n\n\n\"lm\" for linear models\n\n\"glm\" for generalised linear models\n\n\"stan\" for Bayesian inference\n\nYou can find out which engines can be used with the show_engines() function. The command show_engines(\"poisson_reg\") will give you the available engines for the poisson_reg() function.\nSo, we can create the model as follows:\n\nisl_mod <- poisson_reg() %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"glm\")\n\nNote that we are not actually specifying any of the variables just yet! All we’ve done is tell R what kind of model we’re planning to use. If we want to see how parsnip converts this code to the package syntax, we can check this with translate():\n\nisl_mod %>% translate()\n\nPoisson Regression Model Specification (regression)\n\nComputational engine: glm \n\nModel fit template:\nstats::glm(formula = missing_arg(), data = missing_arg(), weights = missing_arg(), \n    family = stats::poisson)\n\n\nThis shows that we have a poisson regression model, where the outcome is going to be a regression. The model fit template tells us that we’ll be using the glm() function from the stats package, which can take a formula, data, weights and family argument. The family argument is already set to poisson.\nThe model fit template tells us that we’ll be using the glm() function from the stats package (stats::glm). This function has several arguments:\n\na formula, which we’ll specify later\n\ndata, which we’ll provide in a bit\n\nweights, if we want to add prior weights to our variable - we don’t have to concern ourselves with this - and\na family argument, which is already set to poisson\n\n\n\n\n\n\n\n\nThe family argument\n\n\n\nThe family argument gives us a description of the error distribution and link function that will be used in the model. For the islands data set we are looking at count outcome - which we can model using a poisson regression model.\nIf we’d want to specify it manually, then we’d use\nset_engine(\"glm\", family = stats::poisson(link = \"log\"))\nwhich sets the family to poisson, using a log link function.\n\n\nNow we’ve specified what kind of model we’re planning to use, we can fit our data to it, using the fit() function:\n\nisl_fit <- isl_mod %>% \n  fit(species ~ area,\n      data = islands)\n\nWe can look at the output directly, but I prefer to tidy the data up using the tidy() function from broom package:\n\nisl_fit %>% tidy()\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic   p.value\n  <chr>          <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)   4.24     0.0413      103.  0        \n2 area          0.0356   0.00125      28.6 2.73e-179\n\n\nThe output is strikingly similar to the binomial models (who’d have guessed, eh?) and the main numbers to extract from the output are the two numbers in the estimate column.\n\n\n\nThese are the coefficients of the Poisson model equation and need to be placed in the following formula in order to estimate the expected number of species as a function of island size:\n\\[ E(species) = \\exp(4.24 + 0.036 \\times area) \\]\nInterpreting this requires a bit of thought (not much, but a bit).\nThe intercept coefficient (\\(\\beta_0\\)), 4.24, is related to the number of species we would expect on an island of zero area (this is statistics, not real life. You’d do well to remember that before you worry too much about what that even means). But in order to turn this number into something meaningful we have to exponentiate it. Since \\(\\exp(4.24) \\approx 70\\), we can say that the baseline number of species the model expects on any island is 70. This isn’t actually the interesting bit though.\nThe coefficient of area (\\(\\beta_1\\)) is the fun bit. For starters we can see that it is a positive number which does mean that increasing area leads to increasing numbers of species. Good so far - since this matches what we saw when we plotted our data. But what does the value 0.036 actually mean?\nWell, if we exponentiate it too we get \\(\\exp(0.036) \\approx 1.04\\). This means that for every increase in area of 1 km2 (the original units of the area variable) the number of species on the island is multiplied by 1.04. So, an island of area 1 km2 is predicted to have \\(1.04 \\times 70 \\approx 72\\) species.\nSo, in order to interpret Poisson coefficients, you have to exponentiate them."
  },
  {
    "objectID": "materials/glm-practical-poisson.html#model-predictions",
    "href": "materials/glm-practical-poisson.html#model-predictions",
    "title": "\n5  Poisson regression\n",
    "section": "\n5.5 Model predictions",
    "text": "5.5 Model predictions\nNow that we can interpret the Poisson coefficients, it would be good to see if using a poisson regression to describe these data is actually a good idea.\nVisualisation is always useful, so in order to get an idea of how our data fits a Poisson regression, we’ll plot the Poisson regression curve. Next, we overlay our original data.\n\ntidyverse\n\n\nFirst, we create a table that contains data for the curve, starting for an area with value 1 to 50, in steps of 1.\n\nmodel <- tibble(area = seq(1, 50, 1))\n\nNext, we feed our model these data:\n\ncurve <- isl_fit %>% augment(new_data = model)\n\nThis gives the predicted number of species for each given value of area. If we have a closer look at these data we can see that, for example, for an area with a surface area of 4 km2 the predicted number of species is around 80. Nice.\n\nhead(curve)\n\n# A tibble: 6 × 2\n   area .pred\n  <dbl> <dbl>\n1     1  72.0\n2     2  74.6\n3     3  77.3\n4     4  80.1\n5     5  83.0\n6     6  86.0\n\n\nUsing these data, we can now plot all the predicted number of species and overlay our original measured data.\n\nggplot(curve, aes(area, .pred)) +\n  geom_line(colour = \"red\") +\n  geom_point(data = islands, aes(area, species))\n\n\n\n\n\n\n\nThat looks like a pretty decent fit, really. But of course we want to have a (slightly) less hand-wavy conclusion than that."
  },
  {
    "objectID": "materials/glm-practical-poisson.html#goodness-of-fit",
    "href": "materials/glm-practical-poisson.html#goodness-of-fit",
    "title": "\n5  Poisson regression\n",
    "section": "\n5.6 Goodness-of-fit",
    "text": "5.6 Goodness-of-fit\nWe can use the model’s residual deviance to assess how much the predicted values differ from the observed. This gives us an idea of how well-specified the model is. When a model is “true”, i.e. the model makes pretty accurate predictions, then we expect the residual deviance to be distributed as a \\(\\chi^2\\) random variable with degrees of freedom equal to the model’s residual degrees of freedom.\n\ntidyverse\n\n\nWe can get these parameters as follows and we’ll store them in a new object, so we can extract them in a bit.\n\nisl_fit %>% glance()\n\n# A tibble: 1 × 8\n  null.deviance df.null logLik   AIC   BIC deviance df.residual  nobs\n          <dbl>   <int>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>\n1          857.      34  -139.  283.  286.     30.4          33    35\n\nisl_parameters <- isl_fit %>% glance()\n\nThe values we are interested in are in the deviance and df.residual columns, respectively.\nNext, we use the pchisq() function to calculate the correct probability.\n\npchisq(isl_parameters$deviance,\n       isl_parameters$df.residual,\n       lower.tail = FALSE)\n\n[1] 0.595347\n\n\nThis gives us a value of around 0.60. This suggests that this model is actually a pretty good one (if it wasn’t then the value would be close to zero) and that the data are pretty well supported by the model.\n\n\n\n\n\n\nImportant\n\n\n\nThe pchisq() function gives the lower tail probability that \\(\\chi^2 \\le x\\) by default. We’re actually interested in the probability that \\(\\chi^2 \\ge x\\). These two probabilities must sum to one, so we get the upper tail probability by setting the argument lower.tail = FALSE. An alternative way would be to use the default, but do 1 - pchisq().\n\n\nFor Poisson models this has an extra interpretation. This can be used to assess whether we have significant overdispersion in our data. For a Poisson model to be appropriate we need that the variance of the data to be exactly the same as the mean of the data. If there is overdispersion then the data would spread out more for higher predicted values of species than for lower ones. Our visualisation shows that this isn’t really happening. The spread is unlikely to be perfectly homogeneous, but we don’t want the data to spread out too much.\nThe easy way to check this is to look at the ratio of the residual deviance to the residual degrees of freedom (in this case 0.922). For a Poisson model to be valid, this ratio should be about 1. If the ratio is significantly bigger than 1 then we say that we have over-dispersion in the model and we wouldn’t be able to trust any of the significance testing using a Poisson regression."
  },
  {
    "objectID": "materials/glm-practical-poisson.html#confidence-intervals",
    "href": "materials/glm-practical-poisson.html#confidence-intervals",
    "title": "\n5  Poisson regression\n",
    "section": "\n5.7 Confidence intervals",
    "text": "5.7 Confidence intervals\nWe can also assess how reliable our model is by looking at the confidence intervals of the estimated parameters.\n\ntidyverse\n\n\nWe extracted the parameters of the model by using\n\nisl_fit %>% tidy()\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic   p.value\n  <chr>          <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)   4.24     0.0413      103.  0        \n2 area          0.0356   0.00125      28.6 2.73e-179\n\n\nAlthough we focussed on the estimate column, we can see that the associated standard errors for each estimate is also given in the std.error column. We can use these values to calculate the 95% confidence intervals.\nWe can either do this by hand through multiplying the standard errors by 1.96. We can then subtract from (giving the lower confidence estimate) or add to (giving the higher confidence estimate) the estimated parameter. This gives a pretty decent approximation.\nBut then again, life is short, so we can just use the additional argument that is available for the tidy() function. You can look at what columns are returned, but I’m selecting the relevant ones here:\n\nisl_fit %>% tidy(conf.int = TRUE,        # default is FALSE\n                 conf.level = 0.95) %>%  # is the default\n  select(term, estimate, conf.low, conf.high)\n\n# A tibble: 2 × 4\n  term        estimate conf.low conf.high\n  <chr>          <dbl>    <dbl>     <dbl>\n1 (Intercept)   4.24     4.16      4.32  \n2 area          0.0356   0.0332    0.0381\n\n\nWhat we’re interested in here is the confidence intervals for the area parameter. Before we delve into that, I’m also going to calculate the exponent for these confidence intervals. We can do this using the exp() function.\n\nisl_fit %>% tidy(conf.int = TRUE,        # default is FALSE\n                 conf.level = 0.95) %>%  # is the default\n  select(term, estimate, conf.low, conf.high) %>% \n  mutate(conf.low_exp = exp(conf.low),\n         conf.high_exp = exp(conf.high))\n\n# A tibble: 2 × 6\n  term        estimate conf.low conf.high conf.low_exp conf.high_exp\n  <chr>          <dbl>    <dbl>     <dbl>        <dbl>         <dbl>\n1 (Intercept)   4.24     4.16      4.32          64.1          75.3 \n2 area          0.0356   0.0332    0.0381         1.03          1.04\n\n\nThese values are a bit familiar, since we’ve previously determined based on the area coefficient that for each increase in square kilometer, the number of species increases by approximately 1.04.\nWhat these values tell us is that we can be 95% certain that for every increase in square kilometer of island area size, the number of species increases by a factor of somewhere between 1.034 and 1.039.\n\n\n\n\n\n\nNote\n\n\n\nIf there was no association between area and species, then the \\(\\beta_1\\) coefficient would be zero. That would mean that the exponent would be \\({e}^{\\beta_1}=1\\). The interval that we calculated for \\({e}^{\\beta_1}\\) lies between 1.034 and 1.039 and therefore does not include 1, so the model with area is preferred over the model without area.\nEquivalently, the interval for \\(\\beta_1\\) (0.033 - 0.038) does not include 0, again showing the significance of area as a predictor of species."
  },
  {
    "objectID": "materials/glm-practical-poisson.html#exercise-seatbelts",
    "href": "materials/glm-practical-poisson.html#exercise-seatbelts",
    "title": "\n5  Poisson regression\n",
    "section": "\n5.8 Exercise: Seatbelts",
    "text": "5.8 Exercise: Seatbelts\nI’d like you to do the following:\n\nLoad the data\nVisualise the data and create a poisson regression model\nPlot the regression model on top of the data\nAssess if the model is a decent predictor for the number of fatalities\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n5.8.1 Load the data\nFirst, we load the data.\n\ntidyverse\n\n\n\nseatbelts <- read_csv(\"data/seatbelts.csv\")\n\nRows: 192 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): month\ndbl (9): drivers_killed, drivers, front, rear, kms, petrol_price, van_killed...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n5.8.2 Visualise the data\nThe data tracks the number of drivers killed in road traffic accidents, before and after the seatbelt law was introduced. The information on whether the law was in place is encoded in the law column as 0 (law not in place) or 1 (law in place).\nThere are many more observations when the law was not in place, so we need to keep this in mind when we’re interpreting the data.\nFirst we have a look at the data comparing no law vs law:\n\ntidyverse\n\n\nWe have to convert the law column to a factor, otherwise R will see it as numerical.\n\nseatbelts %>% \n  ggplot(aes(as_factor(law), drivers_killed)) +\n   geom_boxplot()\n\n\n\n\nThe data are recorded by month and year, so we can also display the number of drivers killed by year:\n\nseatbelts %>% \n  ggplot(aes(year, drivers_killed)) +\n  geom_point()\n\n\n\n\n\n\n\nThe data look a bit weird. There is quite some variation within years (keeping in mind that the data are aggregated monthly). The data also seems to wave around a bit… with some vague peaks (e.g. 1972 - 1973) and some troughs (e.g. around 1976).\nSo my initial thought is that these data are going to be a bit tricky to interpret. But that’s OK.\n\n5.8.3 Model building\nWe’re dealing with count data, so we’re going to use a poisson regression.\n\ntidyverse\n\n\nAs before, we first define the model type.\n\nstb_mod <- poisson_reg() %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"glm\")\n\nAnd check that everything is in order.\n\nstb_mod %>% translate()\n\nPoisson Regression Model Specification (regression)\n\nComputational engine: glm \n\nModel fit template:\nstats::glm(formula = missing_arg(), data = missing_arg(), weights = missing_arg(), \n    family = stats::poisson)\n\n\nNext, we fit our data to the model we just specified:\n\nstb_fit <- stb_mod %>% \n  fit(drivers_killed ~ year,\n      data = seatbelts)\n\nAnd we can extract the estimated coefficients from these fitted data:\n\nstb_fit %>% tidy()\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)  37.2      2.80         13.3 2.62e-40\n2 year         -0.0164   0.00142     -11.6 5.88e-31\n\n\n\n\n\n\n5.8.4 Visualise the model\nTo see if the model is actually a decent prediction for our data, we can plot it.\n\ntidyverse\n\n\nTo do this, we create modelled values for our predictor variable year. Because we have monthly data, we create a sequence of “years” in 1/12th intervals - one for each month.\nNext, we ask the model to predict the number of drivers killed based on these values.\nLastly, we can plot those predicted values against the observed values in our data set.\n\n# create the sequence of values that are used\n# in predicting number of deaths\nmodel <- tibble(year = seq(1969, 1984, (1/12)))\n\n# fit these data to the model\nstb_curve <- stb_fit %>% augment(new_data = model)\n\n# plot the predicted values\n# and overlay the observed values\nggplot(seatbelts, aes(year, drivers_killed)) +\n  geom_point() +\n  geom_point(data = stb_curve, aes(x = year, y = .pred),\n             colour = \"red\")\n\n\n\n\n\n\n\nThat does not look like a very good fit, but then again the data look rather messy as well.\n\n5.8.5 Goodness-of-fit\nLet’s check the goodness-of-fit.\n\ntidyverse\n\n\nFirst we store the parameter estimates in an object. Then we use the pchisq() function to calculate the probability that the residual deviance is actually distributed as a \\(\\chi^2\\) random variable with degrees of freedom equal to the model’s residual degrees of freedom.\nYes, you can read that sentence three times and still wonder what that really means. Suffice to say is that the outcome gives us a measure of how well-specified the model is.\n\nstb_parameter <- stb_fit %>% glance()\n\nstb_parameter\n\n# A tibble: 1 × 8\n  null.deviance df.null logLik   AIC   BIC deviance df.residual  nobs\n          <dbl>   <int>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>\n1          984.     191 -1062. 2127. 2134.     850.         190   192\n\npchisq(stb_parameter$deviance,\n       stb_parameter$df.residual,\n       lower.tail = FALSE)\n\n[1] 3.12987e-84\n\n\n\n\n\nWell, that’s a bit of a blow. The probability value is extremely low, suggesting that the model is not very well-specified. Which kind of matches what we already saw in the plot. It might still be better than the null model (“the data can be modelled as the average across all the observations”), but we seem to be missing some parameters here.\n\n5.8.6 Confidence intervals\nSimilar to the islands example, we can also calculate the confidence intervals associated with our estimated parameters.\n\ntidyverse\n\n\n\nstb_fit %>% tidy(conf.int = TRUE,        # default is FALSE\n                 conf.level = 0.95) %>%  # is the default\n  select(term, estimate, conf.low, conf.high) %>% \n  mutate(conf.low_exp = exp(conf.low),\n         conf.high_exp = exp(conf.high))\n\n# A tibble: 2 × 6\n  term        estimate conf.low conf.high conf.low_exp conf.high_exp\n  <chr>          <dbl>    <dbl>     <dbl>        <dbl>         <dbl>\n1 (Intercept)  37.2     31.7      42.7        5.78e+13      3.34e+18\n2 year         -0.0164  -0.0191   -0.0136     9.81e- 1      9.86e- 1\n\n\nWe’re interested in the confidence interval for the year variable. Remember that if there is no association at all between year and drivers_killed then the parameter \\(e^{\\beta_1} = 1\\).\nIn our case the interval we calculated for \\(e^{\\beta_1}\\) lies between 0.981 and 0.986. This does not include 1, so it seems that the model that takes year into account is still preferred over a model that doesn’t."
  },
  {
    "objectID": "materials/glm-practical-poisson.html#key-points",
    "href": "materials/glm-practical-poisson.html#key-points",
    "title": "\n5  Poisson regression\n",
    "section": "\n5.9 Key points",
    "text": "5.9 Key points\n\n\n\n\n\n\nNote\n\n\n\n\nPoisson regression is useful when dealing with count data"
  }
]