[
  {
    "objectID": "glm-practical-logistic-binary.html#libraries-and-functions",
    "href": "glm-practical-logistic-binary.html#libraries-and-functions",
    "title": "Binary response",
    "section": "Libraries and functions",
    "text": "Libraries and functions\n\n\ntidyverse\n\n\n\n\n\n\n\nLibrary\nDescription\n\n\n\n\ntidyverse\nA collection of R packages designed for data science\n\n\ntidymodels\nA collection of packages for modelling and machine learning using tidyverse principles"
  },
  {
    "objectID": "glm-practical-logistic-binary.html#datasets",
    "href": "glm-practical-logistic-binary.html#datasets",
    "title": "Binary response",
    "section": "Datasets",
    "text": "Datasets\n\n\nDiabetes\nThe example in this section uses the following data set:\ndata/diabetes.csv\nThis is a data set comprising 768 observations of three variables (one dependent and two predictor variables). This records the results of a diabetes test result as a binary variable (1 is a positive result, 0 is a negative result), along with the result of a glucose test and the diastolic blood pressure for each of 767 women. The variables are called test_result, glucose and diastolic."
  },
  {
    "objectID": "glm-practical-logistic-binary.html#visualise-the-data",
    "href": "glm-practical-logistic-binary.html#visualise-the-data",
    "title": "Binary response",
    "section": "Visualise the data",
    "text": "Visualise the data\nFirst we load the data, then we visualise it.\n\n\ntidyverse First, we load and inspect the data:\n\ndiabetes <- read_csv(\"data/diabetes.csv\")\n\nLooking at the data, we can see that the test_result column contains zeros and ones. These are test result outcomes and not actually numeric representations.\nThis will cause problems later, so we need to tell R to see these values as factors. For good measure we’ll also improve the information in test_result by classifying it as ‘negative’ (0) or ‘positive’ (1).\n\ndiabetes <- \ndiabetes %>% \n  # replace 0 with 'negative' and 1 with 'positive'\n  mutate(test_result = case_when(test_result == 0 ~ \"negative\",\n                                 TRUE ~ \"positive\")) %>% \n  # convert character columns to factor\n  mutate_if(is.character, factor)\n\nWe can plot the data:\n\ndiabetes %>% \n  ggplot(aes(x = test_result, y = glucose)) +\n  geom_boxplot()\n\n\n\n\nIt looks as though the patients with a positive diabetes test have slightly higher glucose levels than those with a negative diabetes test.\nWe can visualise that differently by plotting all the data points as a classic binary response plot:\n\ndiabetes %>% \n  ggplot(aes(x = glucose, y = test_result)) +\n  geom_point()"
  },
  {
    "objectID": "glm-practical-logistic-binary.html#model-building",
    "href": "glm-practical-logistic-binary.html#model-building",
    "title": "Binary response",
    "section": "Model building",
    "text": "Model building\nThere are different ways to construct a logistic model.\n\n\ntidyverse\nIn tidymodels we have access to a very useful package: parsnip, which provides a common syntax for a whole range of modelling libraries. This means that the syntax will stay the same as you do different kind of model comparisons. So, the learning curve might be a bit steeper to start with, but this will pay dividend in the long-term (just like when you started using R!).\nFirst, we need to load tidymodels (install it first, if needed):\n\n# install.packages(\"tidymodels\")\nlibrary(tidymodels)\n\nThe workflow in parsnip is a bit different to what we’re used to so far. Up until now, we’ve directly used the relevant model functions to analyse our data, for example using the lm() function to create linear models.\nUsing parsnip we approach things in a more systematic manner. At first this might seem unnecessarily verbose, but there are clear advantages to approaching your analysis in a systematic way. For example, it will be straightforward to implement other types of models using the same workflow, which you’ll definitely find useful when moving on to more difficult modelling tasks.\nUsing tidymodels we specify a model in three steps:\n\nSpecify the type of model based on its mathematical structure (e.g., linear regression, random forest, K-nearest neighbors, etc).\nWhen required, declare the mode of the model. The mode reflects the type of prediction outcome. For numeric outcomes, the mode is regression; for qualitative outcomes, it is classification. If a model can only create one type of model, such as logistic regression, the mode is already set.\nSpecify the engine for fitting the model. This usually is the software package or library that should be used.\n\nSo, we can create the model as follows:\n\ndia_mod <- logistic_reg() %>% \n  set_mode(\"classification\") %>% \n  set_engine(\"glm\")\n\nNote that we are not actually specifying any of the variables just yet! All we’ve done is tell R what kind of model we’re planning to use. If we want to see how parsnip converts this code to the package syntax, we can check this with translate():\n\ndia_mod %>% translate()\n\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n\nModel fit template:\nstats::glm(formula = missing_arg(), data = missing_arg(), weights = missing_arg(), \n    family = stats::binomial)\n\n\nThis shows that we have a logistic regression model, where the outcome is going to be a classification (in our case, that’s a positive or negative test result). The model fit template tells us that we’ll be using the glm() function from the stats package, which can take a formula, data, weights and family argument. The family argument is already set to binomial.\nNow we’ve specified what kind of model we’re planning to use, we can fit our data to it, using the fit() function:\n\ndia_fit <- dia_mod %>% \n  fit(test_result ~ glucose,\n      data = diabetes)\n\nWe can look at the output directly, but I prefer to tidy the data up using the tidy() function from broom package:\n\ndia_fit %>% tidy()\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)  -5.61     0.442       -12.7 6.90e-37\n2 glucose       0.0395   0.00340      11.6 2.96e-31\n\n\nThe estimate column gives you the coefficients of the logistic model equation. We could use these to calculate the probability of having a positive diabetes test, for any given glucose level, using the following equation:\n\\[\\begin{equation}\nP(positive \\ test \\ result) = \\frac{1}{1 + {e}^{-(-5.61 +  0.040 \\cdot glucose)}}\n\\end{equation}\\]\nBut of course we’re not going to do it that way. We’ll let R deal with that in the next section.\nThe std.error column gives you the error associated with the coefficients and the statistic column tells you the statistic value.\nThe values in p.value merely show whether that particular coefficient is significantly different from zero. This is similar to the p-values obtained in the summary output of a linear model, and as before, for continuous predictors these p-values can be used as a rough guide as to whether that predictor is important (so in this case glucose appears to be significant). However, these p-values aren’t great when we have multiple predictor variables, or when we have categorical predictors with multiple levels (since the output will give us a p-value for each level rather than for the predictor as a whole)."
  },
  {
    "objectID": "glm-practical-logistic-binary.html#model-predictions",
    "href": "glm-practical-logistic-binary.html#model-predictions",
    "title": "Binary response",
    "section": "Model predictions",
    "text": "Model predictions\nWhat if we got some new glucose level data and we wanted to predict if people might have diabetes or not?\nWe could use the existing model and feed it the some data:\n\n\ntidyverse\n\n# create a dummy data set using some hypothetical glucose measurements\ndiabetes_newdata <- tibble(glucose = c(188, 122, 83, 76, 144))\n\n# predict if the patients have diabetes or not\naugment(dia_fit,\n        new_data = diabetes_newdata)\n\n# A tibble: 5 × 4\n  glucose .pred_class .pred_negative .pred_positive\n    <dbl> <fct>                <dbl>          <dbl>\n1     188 positive             0.140         0.860 \n2     122 negative             0.688         0.312 \n3      83 negative             0.912         0.0885\n4      76 negative             0.931         0.0686\n5     144 positive             0.481         0.519 \n\n\nAlthough you are able to get the predicted outcomes (in .pred_class), I would like to stress that this is not the point of running the model. It is important to realise that the model (as with all statistical models) creates a predicted outcome based on certain probabilities. It is therefore much more informative to look at how probable these predicted outcomes are. They are encoded in .pred_negative and .pred_positive.\nFor the first value this means that there is a 14% chance that the diabetes test will return a negative result and around 86% chance that it will return a positive result."
  },
  {
    "objectID": "glm-practical-logistic-binary.html#exercise-penguins",
    "href": "glm-practical-logistic-binary.html#exercise-penguins",
    "title": "Binary response",
    "section": "Exercise: Penguins",
    "text": "Exercise: Penguins\n\nTo practice this a bit more, we’ll be using a data set about penguins. The data are from the palmerpenguins package, which is included with tidymodels. The data set contains information on penguins at the Palmer Station on Antarctica. Chilly.\nHave a look at the plot below, where we are comparing the bill length (bill_length_mm) of three species of penguins (species) against flipper length (flipper_length_mm).\nWe are also colouring the data based on sex (sex) and for good measure we’re also including information on the body size (body_mass_g).\n\n\n\n\n\nIt looks like female penguins are smaller with different sized bills and it would be interesting (yes, it would!) to investigate this further.\nI would like you to do the following:\n\nload the data into an object called penguins using data(\"penguins\")\ncreate a logistic model and fit the data to it, using sex as a classifier\nis bill length an important indicator of sex?\n\n\n\nAnswer\n\nFirst, we load the data:\n\ndata(\"penguins\")\n\nWe already have a reasonably good idea of what we’re looking at, but it can never hurt to understand your data better, so:\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_… body_mass_g sex  \n  <fct>   <fct>           <dbl>         <dbl>            <int>       <int> <fct>\n1 Adelie  Torge…           39.1          18.7              181        3750 male \n2 Adelie  Torge…           39.5          17.4              186        3800 fema…\n3 Adelie  Torge…           40.3          18                195        3250 fema…\n4 Adelie  Torge…           NA            NA                 NA          NA <NA> \n5 Adelie  Torge…           36.7          19.3              193        3450 fema…\n6 Adelie  Torge…           39.3          20.6              190        3650 male \n# … with 1 more variable: year <int>\n\n\nThis shows that there are a few other columns in our data set, namely island, indicating the island where the penguins are residing and bill_depth_mm which records the bill depth.\nWe also notice that there are some missing values. It would be good to get rid of these, at least for the rows where there sex isn’t scored:\n\npenguins <- penguins %>% \n  filter(!is.na(sex))\n\nNext, we specify the type of model. Notice that it can be useful to use a prefix in the naming of these objects to indicate which data set your model belongs to. Here we’re using pgn to denote penguins.\n\npgn_mod <- logistic_reg() %>% \n  set_mode(\"classification\") %>% \n  set_engine(\"glm\")\n\nRemember, that setting the model specification does not yet define the model itself. We do that as follows:\n\npgn_fit <- pgn_mod %>% \n  fit(sex ~ bill_length_mm,\n      data = penguins)\n\nOnce we’ve fitted the data to the model, we can have a look at the model parameters:\n\npgn_fit %>% tidy()\n\n# A tibble: 2 × 5\n  term           estimate std.error statistic       p.value\n  <chr>             <dbl>     <dbl>     <dbl>         <dbl>\n1 (Intercept)      -6.04     1.01       -5.96 0.00000000247\n2 bill_length_mm    0.138    0.0229      6.02 0.00000000176\n\n\nThe model parameters tell us that both the intercept and the coefficient for bill_length_mm are significantly different from zero. So it seems that bill length is an important predictor of the sex of these penguins. Who knew?!"
  },
  {
    "objectID": "glm-practical-logistic-binary.html#model-evaluation",
    "href": "glm-practical-logistic-binary.html#model-evaluation",
    "title": "Binary response",
    "section": "Model evaluation",
    "text": "Model evaluation\nSo far we’ve constructed the logistic model and fed it some new data to make predictions to the possible outcome of a diabetes test, depending on the glucose level of a given patient. This gave us some diabetes test predictions and, importantly, the probabilities of whether the test could come back negative or positive.\nThe question we’d like to ask ourselves at this point: how reliable is the model?\nTo explore this, we need to take a step back.\n\nSplit the data\nWhen we created the model, we used all of the data. However, a good way of assessing a model fit is to actually split the data into two:\n\na training data set that you use to fit your model\na test data set to validate your model and measure model performance\n\nBefore we split the data, let’s have a closer look at the data set. If we count how many diabetes test results are negative and positive, we see that these counts are not evenly split.\n\n\ntidyverse\n\ndiabetes %>% \n  count(test_result) %>% \n  mutate(prop = n/sum(n))\n\n# A tibble: 2 × 3\n  test_result     n  prop\n  <fct>       <int> <dbl>\n1 negative      478 0.657\n2 positive      250 0.343\n\n\nThis can have some consequences if we start splitting our data into a training and test set. By splitting the data into two parts - where most of the data goes into your training set - you have data left afterwards that you can use to test how good the predictions of your model are. However, we need to make sure that the proportion of negative and positive diabetes test outcomes remains roughly the same.\nThe rsample package has a couple of useful functions that allow us to do just that and we can use the strata argument to keep these proportions more or less constant.\n\n# ensures random data split is reproducible\nset.seed(123)\n\n# split the data, basing the proportions on the diabetes test results\ndata_split <- initial_split(diabetes, strata = test_result)\n\n# create data frames for the two sets:\ntrain_data <- training(data_split)\ntest_data  <- testing(data_split)\n\nWe can check what the initial_split() function has done:\n\n# proportion of data allocated to the training set\nnrow(train_data) / nrow(diabetes)\n\n[1] 0.7486264\n\n# proportion of diabetes test results for the training data set\ntrain_data %>% \n  count(test_result) %>% \n  mutate(prop = n/sum(n))\n\n# A tibble: 2 × 3\n  test_result     n  prop\n  <fct>       <int> <dbl>\n1 negative      358 0.657\n2 positive      187 0.343\n\n# proportion of diabetes test results for the test data set\ntest_data %>% \n  count(test_result) %>% \n  mutate(prop = n/sum(n))\n\n# A tibble: 2 × 3\n  test_result     n  prop\n  <fct>       <int> <dbl>\n1 negative      120 0.656\n2 positive       63 0.344\n\n\nFrom the output we can see that around 75% of the data set has been used to create a training data set, with the remaining 25% kept as a test set.\nFurthermore, the proportions of negative:positive are kept more or less constant.\n\nCreate a recipe\n\n# Create a recipe\ndia_rec <- \n  recipe(test_result ~ glucose, data = train_data)\n\n# Look at the recipe summary\nsummary(dia_rec)\n\n# A tibble: 2 × 4\n  variable    type    role      source  \n  <chr>       <chr>   <chr>     <chr>   \n1 glucose     numeric predictor original\n2 test_result nominal outcome   original\n\n\n\n\nBuild a model specification\n\ndia_mod <- \n  logistic_reg() %>% \n  set_engine(\"glm\")\n\n\n\nUse recipe as we train and test our model\n\ndia_wflow <- \n  workflow() %>% \n  add_model(dia_mod) %>% \n  add_recipe(dia_rec)\n\ndia_wflow\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n\n\nAlthough it seems a bit of overkill, we now have a single function that can we can use to prepare the recipe and train the model from the resulting predictors:\n\ndia_fit <- \n  dia_wflow %>% \n  fit(data = train_data)\n\nThis creates an object called dia_fit, which contains the final recipe and fitted model objects. We can extract the model and recipe objects with several helper functions:\n\ndia_fit %>% \n  extract_fit_parsnip() %>% \n  tidy()\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)  -5.72     0.513       -11.2 6.84e-29\n2 glucose       0.0406   0.00397      10.2 1.46e-24\n\n\n\n\nUse trained workflow for predictions\nSo far, we have done the following:\n\nBuilt the model (dia_mod),\nCreated a pre-processing recipe (dia_rec),\nCombined the model and recipe into a workflow (dia_wflow)\nTrained our workflow using the fit() function (dia_fit)\n\nThe results we generated above do not differ much from the values we obtained with the entire data set. However, these are based on 3/4 of the data (our training data set). Because of this, we still have our test data set available to apply this workflow to data the model has not yet seen.\n\ndia_aug <- \naugment(dia_fit, test_data)\n\ndia_aug\n\n# A tibble: 183 × 6\n   glucose diastolic test_result .pred_class .pred_negative .pred_positive\n     <dbl>     <dbl> <fct>       <fct>                <dbl>          <dbl>\n 1      85        66 negative    negative            0.906          0.0938\n 2     183        64 positive    positive            0.152          0.848 \n 3     168        74 positive    positive            0.249          0.751 \n 4     166        72 positive    positive            0.264          0.736 \n 5     115        70 positive    negative            0.740          0.260 \n 6      99        84 negative    negative            0.845          0.155 \n 7     196        90 positive    positive            0.0959         0.904 \n 8     119        80 positive    negative            0.708          0.292 \n 9     143        94 positive    positive            0.478          0.522 \n10      97        66 negative    negative            0.856          0.144 \n# … with 173 more rows\n\n\n\n\nEvaluate the model\nWe can now evaluate the model. One way of doing this is by using the area under the ROC curve as a metric.\nAn ROC curve (receiver operating characteristic curve - the name being a strange relic of WWII where developed for operators of military radar receivers) plots the true-positive rate (TPR) against the false-positive rate (FPR) at varying thresholds.\nThe true-positive rate is also known as sensitivity, whereas the false-positive rate is 1 - sensitivity (which, if you recall from the session of Power Analysis is also known as the power.)\n\ndia_aug %>% \n  roc_curve(truth = test_result, .pred_negative) %>% \n  autoplot()\n\n\n\n\nThe area under the ROC curve, which is known as the AUC provides an aggregate measure of performance across all possible classification thresholds.\nIt ranges in value from 0 to 1. A model whose predictions are 100% wrong has an AUC of 0. A model whose predictions are 100% correct has an AUC of 1.0.\n\ndia_aug %>% \n  roc_auc(truth = test_result, .pred_negative)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.766\n\n\nIn addition to the ROC curve and AUC we also have a whole range of model parameters associated with the fitted model. We’re not going through all of them at this point, but one in particular should be familiar.\nWe extract these parameters as follows:\n\ndia_fit %>% glance()\n\n# A tibble: 1 × 8\n  null.deviance df.null logLik   AIC   BIC deviance df.residual  nobs\n          <dbl>   <int>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>\n1          701.     544  -277.  558.  567.     554.         543   545\n\n\nHere we see the Akaike Information Criterion (AIC) as an output. Remember, the value of the AIC in itself is meaningless, but it’s useful to compare relative to AICs of other models. We covered how to do this in the Power analysis session of the Core statistics course.\nHere we see that the AIC for this model that uses the glucose level as a single predictor for the diabetes test result is 558."
  },
  {
    "objectID": "glm-practical-logistic-binary.html#exercise-diabetes-predictors",
    "href": "glm-practical-logistic-binary.html#exercise-diabetes-predictors",
    "title": "Binary response",
    "section": "Exercise: Diabetes predictors",
    "text": "Exercise: Diabetes predictors\n\nUsing the training and test diabetes data sets, investigate the relationship between test_result and both glucose and diastolic. Try to answer the following:\n\ndoes adding diastolic to the model markedly improve the reliability of the predictions?\nwhat do the AICs for the two models tell you?\n\n\n\nAnswer\n\n\n# Update the recipe\ndia_rec <- \n  recipe(test_result ~ glucose + diastolic,\n         data = train_data)\n\n# Look at the recipe summary\nsummary(dia_rec)\n\n# A tibble: 3 × 4\n  variable    type    role      source  \n  <chr>       <chr>   <chr>     <chr>   \n1 glucose     numeric predictor original\n2 diastolic   numeric predictor original\n3 test_result nominal outcome   original\n\n\nBuild the model, if needed (we have done this already and it stays the same):\n\ndia_mod <- \n  logistic_reg() %>% \n  set_engine(\"glm\")\n\nCreate a workflow…\n\ndia_wflow <- \n  workflow() %>% \n  add_model(dia_mod) %>% \n  add_recipe(dia_rec)\n\n… and fit the data:\n\ndia_fit <- \n  dia_wflow %>% \n  fit(data = train_data)\n\nExtract the model parameters to have a look:\n\ndia_fit %>% \n  extract_fit_parsnip() %>% \n  tidy()\n\n# A tibble: 3 × 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)  -6.99     0.790       -8.85 8.60e-19\n2 glucose       0.0394   0.00398      9.88 5.19e-23\n3 diastolic     0.0195   0.00877      2.22 2.61e- 2\n\n\nApply the fitted model to the test data set:\n\ndia_aug <- \naugment(dia_fit, test_data)\n\ndia_aug\n\n# A tibble: 183 × 6\n   glucose diastolic test_result .pred_class .pred_negative .pred_positive\n     <dbl>     <dbl> <fct>       <fct>                <dbl>          <dbl>\n 1      85        66 negative    negative            0.914          0.0862\n 2     183        64 positive    positive            0.189          0.811 \n 3     168        74 positive    positive            0.257          0.743 \n 4     166        72 positive    positive            0.280          0.720 \n 5     115        70 positive    negative            0.751          0.249 \n 6      99        84 negative    negative            0.811          0.189 \n 7     196        90 positive    positive            0.0776         0.922 \n 8     119        80 positive    negative            0.679          0.321 \n 9     143        94 positive    positive            0.385          0.615 \n10      97        66 negative    negative            0.869          0.131 \n# … with 173 more rows\n\n\nPlot the ROC curve:\n\ndia_aug %>% \n  roc_curve(truth = test_result, .pred_negative) %>% \n  autoplot()\n\n\n\n\nAnd get the area under the ROC curve:\n\ndia_aug %>% \n  roc_auc(truth = test_result, .pred_negative)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.761\n\n\nAnother way to assess the model fit is to look at the Akaike Information Criterion (AIC).\n\ndia_fit %>% glance()\n\n# A tibble: 1 × 8\n  null.deviance df.null logLik   AIC   BIC deviance df.residual  nobs\n          <dbl>   <int>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>\n1          701.     544  -275.  555.  568.     549.         542   545\n\n\nWe get an AIC of 555, which is lower than the AIC of 558 that we got with just glucose as a predictor variable.\n\nConclusions\nAdding the diastolic variable as a predictor to the model does not seem to have much of an effect on the model reliability, since the AUC is 0.761 with the extra parameter, versus 0.766 without.\nThe AIC on the other hand suggests that the additive model we’ve analysed here has a better fit than the original model (AIC of 555 vs 558).\n\n\nFood for thought\nPerhaps there is an interaction between glucose and diastolic, which would be interesting to investigate."
  },
  {
    "objectID": "glm-practical-logistic-binary.html#key-points",
    "href": "glm-practical-logistic-binary.html#key-points",
    "title": "Binary response",
    "section": "Key points",
    "text": "Key points\n\n\nWe use a logistic regression to model a binary response\nModel suitability can be checked by splitting the data into a training and test data set. The logistic model is then created based on the training data, and the reliability can be checked against the (known) values in the test data set\nThe ROC curve shows the performance of a classification model at all thresholds, whereas the area under the ROC curve provides an aggregate measure of performance of all possible classifications thresholds"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Generalised linear models",
    "section": "",
    "text": "Welcome to the wonderful world of generalised linear models!\nThese sessions are intended to enable you to construct and use generalised linear models confidently.\nAs with all of our statistics courses, we use:\nAt the same time this is not a “how to mindlessly use a stats program” course!"
  },
  {
    "objectID": "index.html#core-aims",
    "href": "index.html#core-aims",
    "title": "Generalised linear models",
    "section": "Core aims",
    "text": "Core aims\nTo introduce sufficient understanding and coding experience for analysing data with non-continuous response variables.\n\n\n\n\n\n\nCourse aims\n\n\n\nTo know what to do when presented with an arbitrary data set e.g.\n\nConstruct\n\na logistic model for binary response variables\na logistic model for proportion response variables\na Poisson model for count response variables\na Negative Binomial model for count response variables\n\nPlot the data and the fitted curve in each case for both continuous and categorical predictors\nAssess the significance of fit\nAssess assumption of the model"
  },
  {
    "objectID": "index.html#index-datasets",
    "href": "index.html#index-datasets",
    "title": "Generalised linear models",
    "section": "Datasets",
    "text": "Datasets\nThis course uses various data sets. Download the data folder here by right-clicking on the link and Save as…. Next unzip the file and copy it into your working directory. Your data should then be accessible via <working-directory-name>/data/."
  }
]