{
  "hash": "c060bb2c7e874a1d3d05a8fd37a79855",
  "result": {
    "markdown": "---\ntitle: \"Binary response\"\nformat: html\neditor: visual\n---\n\n::: {.cell}\n\n:::\n\n\n::: callout-note\n## Aims & objectives\n\n-   How do we analyse data with a binary outcome?\n-   Can we test if our model is any good?\n-   Be able to perform a logistic regression with a binary outcome\n-   Predict outcomes of new data, based on a defined model\n-   Evaluate model reliability by using training and test data sets\n:::\n\n## Libraries and functions\n\n::: panel-tabset\n## tidyverse\n\n| Library          | Description                                                                            |\n|:-----------------------------------|:-----------------------------------|\n| `tidyverse`      | A collection of R packages designed for data science                                   |\n| `tidymodels`     | A collection of packages for modelling and machine learning using tidyverse principles |\n| `palmerpenguins` | Package that contains data on penguins                                                 |\n:::\n\n## Datasets\n\n::: panel-tabset\n## Diabetes\n\nThe example in this section uses the following data set:\n\n`data/diabetes.csv`\n\nThis is a data set comprising 768 observations of three variables (one dependent and two predictor variables). This records the results of a diabetes test result as a binary variable (1 is a positive result, 0 is a negative result), along with the result of a glucose test and the diastolic blood pressure for each of 767 women. The variables are called `test_result`, `glucose` and `diastolic`.\n:::\n\n## Visualise the data\n\nFirst we load the data, then we visualise it.\n\n::: panel-tabset\n## tidyverse\n\nFirst, we load and inspect the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiabetes <- read_csv(\"data/diabetes.csv\")\n```\n:::\n\n\nLooking at the data, we can see that the `test_result` column contains zeros and ones. These are test result outcomes and not actually numeric representations.\n\nThis will cause problems later, so we need to tell R to see these values as factors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiabetes <- diabetes %>%\n  mutate(test_result = factor(test_result))\n```\n:::\n\n\nWe can plot the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiabetes %>% \n  ggplot(aes(x = test_result, y = glucose)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](glm-practical-logistic-binary_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nIt looks as though the patients with a positive diabetes test have slightly higher glucose levels than those with a negative diabetes test.\n\nWe can visualise that differently by plotting all the data points as a classic binary response plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiabetes %>% \n  ggplot(aes(x = glucose, y = test_result)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](glm-practical-logistic-binary_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThis presents us with a bit of an issue. We could fit a linear regression model to these data. We'd have to see the test result as a numeric outcome, _because linear regression models only deal with numerical response variables_:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiabetes %>% \n  mutate(test_result = as.numeric(test_result)) %>% \n  ggplot(aes(x = glucose, y = test_result)) +\n  geom_smooth(method = \"lm\") +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](glm-practical-logistic-binary_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nOf course this is rubbish - we can't have test results outside the range of [0, 1].\n\nBut for the sake of exploration, let's look at the assumptions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiabetes %>% \n  mutate(test_result = as.numeric(test_result)) %>% \n  lm(test_result ~ glucose, data = .) %>% \n  resid_panel(plots = c(\"resid\", \"qq\", \"ls\", \"cookd\"),\n              smoother = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](glm-practical-logistic-binary_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThey're ~~pretty~~ extremely bad.\n\n* The response is not linear (Residual Plot, binary response plot, common sense).\n* The residuals are not distributed normally (Q-Q Plot)\n* The variance is not homogeneous across the predicted values (Location-Scale Plot)\n* But - there is always a silver lining - we don't have influential data points.\n\n::: {.callout-note}\n## Viewing residuals\n\nAnother way of viewing the residuals (apart from the Q-Q plot) is as a dot-plot. The `ggdist` and `distributional` packages are extremely useful for this kind of stuff.\n\nWhat I'm doing here is:\n\n* define the model\n* create a normal distribution with $\\mu = 0$ and $\\sigma = 0.415$ (I've calculated these from the residuals with `rstatix::get_summary_stats`)\n* plot the residuals\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiabetes %>% \n  mutate(test_result = as.numeric(test_result)) %>%\n  lm(test_result ~ glucose, data = .) %>%\n  resid() %>%\n  as_tibble() %>%\n  # rstatix::get_summary_stats()\n  ggplot(aes(x = value)) +\n  stat_dist_halfeye(aes(dist = dist_normal(0,0.415)),\n                    orientation = \"horizontal\") +\n  stat_dotsinterval(aes(x = value),\n                    orientation = \"horizontal\",\n                    fill = \"firebrick\", scale = 1) +\n  labs(title = \"Linear model (diabetes)\", y = \"probability\", x = NULL)\n```\n\n::: {.cell-output-display}\n![](glm-practical-logistic-binary_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThis again tells us that the residuals are really not normally distributed.\n:::\n:::\n\n\n## Model building\n\nSo we've established that we shouldn't be using a standard linear regression model. From the introduction we've learned that we can use a binomial model instead. We are specifically using a _logistic model_, which is a binomial model with a logistic link function.\n\nThere are different ways to construct a logistic model.\n\n::: panel-tabset\n## tidyverse\n\nIn `tidymodels` we have access to a very useful package: `parsnip`, which provides a common syntax for a whole range of modelling libraries. This means that the syntax will stay the same as you do different kind of model comparisons. So, the learning curve might be a bit steeper to start with, but this will pay dividend in the long-term (just like when you started using R!).\n\nFirst, we need to load `tidymodels` (install it first, if needed):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"tidymodels\")\nlibrary(tidymodels)\n```\n:::\n\n\nThe workflow in `parsnip` is a bit different to what we're used to so far. Up until now, we've directly used the relevant model functions to analyse our data, for example using the `lm()` function to create linear models.\n\nUsing `parsnip` we approach things in a more systematic manner. At first this might seem unnecessarily verbose, but there are clear advantages to approaching your analysis in a systematic way. For example, it will be straightforward to implement other types of models using the same workflow, which you'll definitely find useful when moving on to more difficult modelling tasks.\n\nUsing `tidymodels` we specify a model in three steps:\n\n1.  **Specify the type of model based on its mathematical structure** (e.g., linear regression, logistic regression, poisson regression etc).\n\nFor example:\n\n-   `linear_reg()` for linear regression\n-   `logistic_reg()` for logistic regression\n-   `poisson_reg()` for poisson regression (more on this later)\n\n2.  **When required, declare the mode of the model.** The mode reflects the type of prediction outcome. For numeric outcomes, the mode is *regression*; for qualitative outcomes, it is *classification.* If a model can only create one type of model, such as logistic regression, the mode is already set to, in this case, `mode = \"classification\"`.\n\n3.  **Specify the engine for fitting the model.** This usually is the software package or library that should be used.\n\nFor example,\n\n-   `\"lm\"` for linear models\n-   `\"glm\"` for generalised linear models\n-   `\"stan\"` for Bayesian inference\n\nYou can find out which engines can be used with the `show_engines()` function. The command `show_engines(\"logistic_reg\")` will give you the available engines for the `logistic_reg()` function.\n\nSo, we can create the model as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndia_mod <- logistic_reg() %>% \n  set_mode(\"classification\") %>% \n  set_engine(\"glm\")\n```\n:::\n\n\nNote that we are not actually specifying any of the variables just yet! All we've done is tell R what kind of model we're planning to use. If we want to see how `parsnip` converts this code to the package syntax, we can check this with `translate()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndia_mod %>% translate()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n\nModel fit template:\nstats::glm(formula = missing_arg(), data = missing_arg(), weights = missing_arg(), \n    family = stats::binomial)\n```\n:::\n:::\n\n\nThis shows that we have a logistic regression model, where the outcome is going to be a **classification** (in our case, that's a positive (1) or negative test (0) result).\n\nThe model fit template tells us that we'll be using the `glm()` function from the `stats` package (`stats::glm`). This function several arguments:\n\n1.  a `formula`, which we'll specify later\n2.  `data`, which we'll provide in a bit\n3.  `weights`, if we want to add prior weights to our variable - we don't have to concern ourselves with this - and\n4.  a `family` argument, which is already set to `binomial`\n\n::: callout-important\n## The `family` argument\n\nThe `family` argument gives us a description of the error distribution and link function that will be used in the model. For the `diabetes` data set we are looking at a binary (0 \\| 1) outcome - which we can model using a *binomial* model.\n\nIf we'd want to specify it manually, then we'd use\n\n`set_engine(\"glm\", family = stats::binomial(link = \"logit\"))`\n\nwhich sets the family to binomial, using a logit link function.\n:::\n\nNow we've specified what kind of model we're planning to use, we can fit our data to it, using the `fit()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndia_fit <- dia_mod %>% \n  fit(test_result ~ glucose,\n      data = diabetes)\n```\n:::\n\n\nWe can look at the output directly, but I prefer to tidy the data up using the `tidy()` function from `broom` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndia_fit %>% tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)  -5.61     0.442       -12.7 6.90e-37\n2 glucose       0.0395   0.00340      11.6 2.96e-31\n```\n:::\n:::\n\n\nThe `estimate` column gives you the coefficients of the logistic model equation. We could use these to calculate the probability of having a positive diabetes test, for any given glucose level, using the following equation:\n\n\n$$ P(positive \\ test\\ result) = \\frac{\\exp(-5.61 + 0.04 \\times glucose)}{1 + \\exp(-5.61 + 0.04 \\times glucose)} $$\n\n\n::: {.callout-note collapse=\"true\"}\n## Expanded explanation\n\nWe started with:\n\n-   Our linear predictor equation $$logit(p) = \\beta_0 + \\beta_1 x_1 + ... + \\beta_p x_p$$\n\n-   and link function $$logit(p) = log(\\frac{p}{1 - p})$$\n\nOur coefficients are as follows:\n\n| coefficient | value                                                                       |\n|:-----------------------------------|:-----------------------------------|\n| $\\beta_0$   | -5.6117317 |\n| $\\beta_1$   | 0.0395101     |\n\nWhich means that we can write the linear predictor equation as follows:\n\n\n$$logit(p) = -5.61 + 0.04 \\times glucose$$ We still have to take into account our link function. Combining the two equations gives us:\n\n\n$$log(\\frac{p}{1 - p}) = -5.61 + 0.04 \\times glucose$$\n\n\nTo get our $p$ (the probability of a mouse surviving our treatment), we need to exponentiate our equation:\n\n\n$$\\frac{p}{1 - p} = \\exp{(-5.61 + 0.04 \\times glucose)}$$\n\n\nleading to...\n\n::: {style=\"background-color: #e0e0e0; padding: 5px\"}\n\n$$p = \\frac{\\exp{(-5.61 + 0.04 \\times glucose)}}{1 + \\exp{(-5.61 + 0.04 \\times glucose)}}$$\n\n:::\n:::\n:::\n\nBut of course we're not going to do it that way. We'll let R deal with that in the next section.\n\nThe `std.error` column gives you the error associated with the coefficients and the `statistic` column tells you the Z-statistic value.\n\nThe values in `p.value` merely show whether that particular coefficient is significantly different from zero. This is similar to the p-values obtained in the summary output of a linear model, and as before, for continuous predictors these p-values can be used as a rough guide as to whether that predictor is important (so in this case glucose appears to be significant). However, these p-values aren't great when we have multiple predictor variables, or when we have categorical predictors with multiple levels (since the output will give us a p-value for each level rather than for the predictor as a whole).\n\n## Model predictions\n\nWhat if we got some new glucose level data and we wanted to predict if people might have diabetes or not?\n\nWe could use the existing model and feed it some data:\n\n::: panel-tabset\n## tidyverse\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a dummy data set using some hypothetical glucose measurements\ndiabetes_newdata <- tibble(glucose = c(188, 122, 83, 76, 144))\n\n# predict if the patients have diabetes or not\naugment(dia_fit,\n        new_data = diabetes_newdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  glucose .pred_class .pred_0 .pred_1\n    <dbl> <fct>         <dbl>   <dbl>\n1     188 1             0.140  0.860 \n2     122 0             0.688  0.312 \n3      83 0             0.912  0.0885\n4      76 0             0.931  0.0686\n5     144 1             0.481  0.519 \n```\n:::\n:::\n\nAlthough you are able to get the predicted outcomes (in `.pred_class`), I would like to stress that this is not the point of running the model. It is important to realise that the model (as with all statistical models) creates a predicted outcome based on certain *probabilities*. It is therefore much more informative to look at how probable these predicted outcomes are. They are encoded in `.pred_0` and `.pred_1`.\n\nFor the first value this means that there is a 14% chance that the diabetes test will return a negative result and around 86% chance that it will return a positive result.\n:::\n\n## Exercise: Penguins\n\nTo practice this a bit more, we'll be using a data set about penguins. The data are from the `palmerpenguins` package, so load that if needed. The data set contains information on penguins at the Palmer Station on Antarctica. Chilly.\n\n::: {.callout-tip}\nThere is also a built-in package called `penguins` in R. Which can cause some issues sometimes. If you're having problems creating some of the graphs, then run the following command to ensure that the correct `penguins` data set is loaded:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"penguins\", package = \"palmerpenguins\")\n```\n:::\n:::\n\nHave a look at the plot below, where we are comparing the bill length (`bill_length_mm`) of three species of penguins (`species`) against flipper length (`flipper_length_mm`).\n\nWe are also colouring the data based on sex (`sex`) and for good measure we're also including information on the body size (`body_mass_g`).\n\n::: {.cell}\n::: {.cell-output-display}\n![](glm-practical-logistic-binary_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\nIt looks like female penguins are smaller with different sized bills and it would be interesting (yes, it would!) to investigate this further.\n\nI would like you to do the following:\n\n1.  load the data into an object called `penguins`\n2.  create a logistic model and fit the data to it, using `sex` as a classifier\n3.  is bill length an important indicator of sex?\n\n::: {.callout-caution collapse=\"true\"}\n## Answer\n\n::: panel-tabset\n## tidyverse\n\nFirst, we load the data:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"penguins\", package = \"palmerpenguins\")\n```\n:::\n\nWe already have a reasonably good idea of what we're looking at, but it can never hurt to understand your data better, so:\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_… body_mass_g sex  \n  <fct>   <fct>           <dbl>         <dbl>            <int>       <int> <fct>\n1 Adelie  Torge…           39.1          18.7              181        3750 male \n2 Adelie  Torge…           39.5          17.4              186        3800 fema…\n3 Adelie  Torge…           40.3          18                195        3250 fema…\n4 Adelie  Torge…           NA            NA                 NA          NA <NA> \n5 Adelie  Torge…           36.7          19.3              193        3450 fema…\n6 Adelie  Torge…           39.3          20.6              190        3650 male \n# … with 1 more variable: year <int>\n```\n:::\n:::\n\nThis shows that there are a few other columns in our data set, namely `island`, indicating the island where the penguins are residing and `bill_depth_mm` which records the bill depth.\n\nWe also notice that there are some missing values. It would be good to get rid of these, at least for the rows where there sex isn't scored:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- penguins %>% \n  filter(!is.na(sex))\n```\n:::\n\nNext, we specify the type of model. Notice that it can be useful to use a prefix in the naming of these objects to indicate which data set your model belongs to. Here we're using *pgn* to denote penguins.\n\n::: {.cell}\n\n```{.r .cell-code}\npgn_mod <- logistic_reg() %>% \n  set_mode(\"classification\") %>% \n  set_engine(\"glm\")\n```\n:::\n\nRemember, that setting the model *specification* does not yet define the model itself. We do that as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\npgn_fit <- pgn_mod %>% \n  fit(sex ~ bill_length_mm,\n      data = penguins)\n```\n:::\n\nOnce we've fitted the data to the model, we can have a look at the model parameters:\n\n::: {.cell}\n\n```{.r .cell-code}\npgn_fit %>% tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term           estimate std.error statistic       p.value\n  <chr>             <dbl>     <dbl>     <dbl>         <dbl>\n1 (Intercept)      -6.04     1.01       -5.96 0.00000000247\n2 bill_length_mm    0.138    0.0229      6.02 0.00000000176\n```\n:::\n:::\n\nThe model parameters tell us that both the intercept and the coefficient for `bill_length_mm` are significantly different from zero. So it seems that bill length is an important predictor of the sex of these penguins. Who knew?!\n:::\n:::\n\n## Key points\n\n::: callout-note\n-   We use a logistic regression to model a binary response\n-   Model suitability can be checked by splitting the data into a training and test data set. The logistic model is then created based on the training data, and the reliability can be checked against the (known) values in the test data set\n-   The ROC curve shows the performance of a classification model at all thresholds, whereas the area under the ROC curve provides an aggregate measure of performance of all possible classifications thresholds\n:::\n",
    "supporting": [
      "glm-practical-logistic-binary_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}